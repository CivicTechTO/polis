# This workflow has a few parts:
#
# 1. a passwordless SSH deploy key that was generated on a workstation via
#
#         ssh-keygen -t ed25519 -C "dummy@example.com" -f /tmp/id_ed25519
#
#   - private key as EDGE_SYNCER_KEY_PRIV env var
#     - see: https://github.com/CivicTechTO/polis/settings/secrets/actions
#   - public key as "edge-syncer"
#     - see: https://github.com/CivicTechTO/polis/settings/keys
# 2. this workflow file
#   - does codebase checkout with EDGE_SYNCER_KEY_PRIV
#   - ssh key is persisted
#   - ssh key is used during push
# 3. a branch protection ruleset than bans everyone from touching edge branch except the SSH deploy key.
#   - Set up manually, but documented in code config here (not actually used).
#   - TODO: Set up "Repository Settings app" to allow repo config via file.
#   - See: .github/config.yml for details

name: Sync edge branch from upstream
on:
  # Allow manual trigger from workflow page.
  workflow_dispatch:

  # Every day at 2am ET (6am UTC)
  # See: https://crontab.guru/#0_6_*_*_*
  schedule:
    - cron:  '0 6 * * *'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # This approach allows us to bypass branch protection.
        # See: https://github.com/ad-m/github-push-action#:~:text=push%20to%20a-,protected%20branch,-inside%20your%20repository
        # See: https://github.com/ad-m/github-push-action#:~:text=authenticate%20with%20GitHub%20Platform%20via%20Deploy%20Keys%20or%20in%20general%20SSH
        # TODO: Document branch ruleset.
        ssh-key: ${{ secrets.EDGE_SYNCER_KEY_PRIV }}
        persist-credentials: true
        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        repository: compdemocracy/polis
        ref: edge

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        # This approach allows us to bypass branch protection. (See above)
        ssh: true
        branch: edge
